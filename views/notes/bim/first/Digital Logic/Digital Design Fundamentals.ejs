<%-include("../../../sharedMarkups/header")%>
<section>
    <h1>Digital and Analog Quantities</h1>

    <section class="subTopicWrap">
        <h3 class="subTopic">Digital and Analog Quantities :</h3>

        <p> - Those quantities which have continuous values throughout the signal are called <strong>Analog
                Quantities</strong>.
            <span class="margin_left">e.g. time, temperature, pressure, distance, etc.</span>
        </p>

        <p> - Those quantities which have discrete values (generally, 1s and 0s) throughout the signal are called
            <strong>Digital Quantities</strong>.</p>

    </section>


    <section class="subTopicWrap">
        <h3 class="subTopic">Advantage of Digital representation over Analog representation :</h3>

        <span class="margin_left">

            <ul>
                <li class="showListStyle">Digital data can be processed and transmitted more efficiently.</li>
                <li class="showListStyle">It can store huge amount of data in less space.</li>
                <li class="showListStyle">Digital data can be easily stored and reproduced with greater accuracy and
                    clarity.</li>
                <li class="showListStyle">External noise has less affect as compared to analog data.</li>
            </ul>
        </span>

    </section>
</section>



<section>

    <h1>Logic operations and digital waveforms</h1>

    <section class="subTopicWrap">
        <h3 class="subTopic">Logic operations :</h3>
        <p>Logic operations include any operations that manipulate Boolean values. Boolean values are either true or
            false.
            They are named after English mathematician George Boole, who invented Boolean algebra, and is widely
            considered
            the founder of computer science theory. They can also be represented as 1 and 0.</p>

    </section>


    <section class="subTopicWrap">
        <h3 class="subTopic">Logic levels :</h3>
        <p>Logic levels, in the broadest sense, describes any specific, discrete state that a signal can have.

            <span class="margin_left">Since we are dealing with digital electronics, we have two logic levels:
                <strong>Logic
                    1</strong> and <strong>Logic 0</strong>.</span>
        </p>

    </section>

    <section class="subTopicWrap">
        <h3 class="subTopic">Digital waveforms :</h3>

        <p>A waveform is a representation of how Alternating Current (AC) varies with time. In digital electronics,
            those
            representation have ony two values either 1 or 0.</p>

        <img src="" alt="digital_waveform">


    </section>
</section>


<section>

    <h1>Logic Gates</h1>
    <p>Digital data needs to be manipulated in order to do the operations that we want. Therefore to manipulate the data
        and get the result, we use logic gates.

        <span class="margin_left">These <strong>Logic Gates</strong> perform logical operations on one or more binary
            inputs and produces a single output.</span>

    </p>


    <span class="margin_left">
        <ul>
            <li class="subTopicWrap">
                <h3 class="subTopic">Basic Logic Gate :</h3>
                <span class="margin_left">Basic Logic Gate consists of <strong>AND, </strong><strong>OR,
                    </strong><strong>NOT </strong>gate.</span>

                <span class="margin_left">
                    <ul>
                        <li>
                            <h4>AND Gate :</h4>A Boolean operator which takes two or more inputs and gives the output of
                            LOGIC 1 if and only if all the operands are 1, otherwise has a output of 0. <span
                                class="margin_left">Mathematically, Y = A.B.C Where, <br>Y = Output; A,B,C =
                                Inputs</span>
                        </li>
                        <li>
                            <h4>OR gate :</h4>A Boolean operator which takes two or more inputs and gives the output of
                            LOGIC 1 if any of the operands is 1, otherwise has a output of 0. <span
                                class="margin_left">Mathematically, Y = A+B+C Where, <br>Y = Output; A,B,C =
                                Inputs</span>
                        </li>
                        <li>
                            <h4>NOT Gate :</h4>A Boolean operator which takes only one input and gives the output of
                            LOGIC 1 if the input is 0, and 1 if the input is 0. Therefore, it is also called invertor.
                            <span class="margin_left">Mathematically, Y = A' Where, <br>Y = Output; A = Input</span>
                            <span class="margin_left">There is also a gate called <strong>Buffer</strong>. It does not
                                change the input value, it just increases the <span class="difficult_words">propagation
                                    time <span class="meaning">Time taken for 1st bit to reach destination</span></span>
                                It's opposite to the <strong>NOT</strong> gate. </span>
                        </li>
                    </ul>
                </span>
            </li>

            <li class="subTopicWrap">
                <h3 class="subTopic">Derived Logic Gate :</h3>
                <span class="margin_left"> In order to achieve certain function, sometimes there is a need to design a
                    circuit that requires the combination of two different gates. Using two different gates to build a
                    circuit takes more space and hard work to construct, therefore some separate logic gates have been
                    derived from basic gates that will take less space in the circuit board and also helps to achieve
                    the functionality. Thus, Derived Logic Gates is the mixture of either <strong>AND,
                    </strong><strong>OR, </strong>or <strong>NOT </strong>gate.</span>

                <span class="margin_left">
                    <ul>
                        <li>
                            <h4>X-OR Gate (Exclusive OR):</h4>It is the combination of AND, OR & NOT gates. It's output
                            is 1 if there are <strong>odd</strong> number of 1s in the input, else the output is 0.
                            <span class="margin_left">Mathematically, Y = A &#8853 B &#8853 C Where, <br>Y = Output;
                                A,B,C = Inputs</span>
                        </li>
                        <li>
                            <h4>X-NOR gate (Exclusive NOR):</h4>It is the combination of AND, OR, NOT and another NOT
                            gates. It's the opposite circuit of X-OR. It's output is 1 if there are 0 or
                            <strong>even</strong> number of 1s in the input, else the output is 0.
                            <span class="margin_left">Mathematically, Y = A &#8857 B &#8857 C Where, <br>Y = Output;
                                A,B,C = Inputs</span>
                        </li>
                    </ul>
                </span>
            </li>

            <li class="subTopicWrap">
                <h3 class="subTopic">Universal Logic Gate :</h3>
                <span class="margin_left">Universal Logic Gates are also derived logic gates. Using these gates, we can
                    construct all the logic gates that exist in digital circuit. Therefore, they are called Universal
                    Logic Gates.</span>

                <span class="margin_left">
                    <ul>
                        <li>
                            <h4>NAND Gate :</h4>It consists of <strong>AND</strong> and <strong>NOT </strong>gate. It
                            acts opposite to the AND gate, because it's simply a AND gate passed through a NOT gate. It
                            gives the output 0 if all operands are 1, otherwise has a output of 1. <span
                                class="margin_left">Mathematically, Y = (A.B.C)' Where, <br>Y = Output; A,B,C =
                                Inputs</span>
                        </li>
                        <li>
                            <h4>NOR gate :</h4>It consists of <strong>OR</strong> and <strong>NOT </strong>gate. It acts
                            opposite to the OR gate, because it's simply a OR gate passed through a NOT gate.It gives
                            the output 0 if any operands are 1, otherwise has a output of 1. <span
                                class="margin_left">Mathematically, Y = (A+B+C)' Where, <br>Y = Output; A,B,C =
                                Inputs</span>
                        </li>
                    </ul>
                </span>
            </li>

        </ul>
    </span>

    <img src="subjects/5/img/logic_symbols.jpg" alt="logic_symbols" caption="Logic Gates">

</section>

<section>
    <h1>Boolean Algebra and Logic simplification</h1>

    <p>Boolean Algebra like any other deductive mathematical system may be defined with a set of elements, a set of
        operators and a no. of unproved postulates. This boolean algebra can be used for analysis, simplification and
        design of digital circuit.</p>
    <span class="margin_left">It uses only the binary numbers i.e. 0 and 1. It is also called as Binary Algebra or
        logical Algebra. Boolean algebra was invented by George Boole in 1854.</span>

    <section class="subTopicWrap">
        <h3 class="subTopic">Truth Table</h3>
        <p>Truth table specifies values of Boolean expression for every possible combination of variables in the
            expression.
            Most of the logic circuit has more than one input and only one output. Thus, a truth table shows how the
            logic
            circuit's output response to various combinations of logic levels of input.</p>
        <img src="" alt="image of TT">

    </section>


    <section class="subTopicWrap">
        <h3 class="subTopic">Postulates of Boolean Algebra</h3>
    </section>
</section>

<%-include("../../../sharedMarkups/footer")%>